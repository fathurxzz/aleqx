@using SpaceGame.DataAccess
@using SpaceGame.UI.Helpers
@model SpaceGame.UI.Models.GameViewModel

@{
    ViewBag.Title = "Resources";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@section Header
{
    @Html.Partial("_Header", Model)
}

@section Title
{
    <div class="mainTitle">
        Resources
    </div>
}


@section Menu
{
    @Html.Partial("Menu")
}


@section Planets
{

}

@section Footer
{
    <div class="footer">
        footer
    </div>
}

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    @Html.Partial("ErrorMessage", Model.ErrorMessage)
}

@{
    short roboticsLevel = Model.PlanetFacilities.Single(f => f.FacilityId == (int)FacilityItem.RoboticsFactory).Level;
    short naniteLevel = Model.PlanetFacilities.Single(f => f.FacilityId == (int)FacilityItem.NaniteFactory).Level;
}

<table class="mineLevels">
    <tr>
        <td class="title">Metal Mine Level: @Model.PlanetResources.ResourceLevelSet().MetalMine</td>
        <td>upgrade to level @(Model.PlanetResources.ResourceLevelSet().MetalMine + 1) costs: 
            <span class="@(Model.PlanetResources.ResourceSet().Metal.UpdateToNextLevelCost.Metal > Model.PlanetResources.ResourceAmountSet().Metal ? "alert" : "ok")">@Model.PlanetResources.ResourceSet().Metal.UpdateToNextLevelCost.Metal.FormatResourcesAmount() </span>metal 
            and <span class="@(Model.PlanetResources.ResourceSet().Metal.UpdateToNextLevelCost.Crystal > Model.PlanetResources.ResourceAmountSet().Crystal ? "alert" : "ok")">@Model.PlanetResources.ResourceSet().Metal.UpdateToNextLevelCost.Crystal.FormatResourcesAmount()</span> crystal
        </td>
        <td>
            
             <span class="bold nowrap">@Model.PlanetResources.ResourceSet().Metal.CalculateUpgradeTime(roboticsLevel,naniteLevel,GameEntity.MetalMine).FormatUpgradeTime()</span> 
                    <br />


            @if (Model.PlanetResources.ResourceSet().Metal.UpdateToNextLevelCost.Metal > Model.PlanetResources.ResourceAmountSet().Metal || Model.PlanetResources.ResourceSet().Metal.UpdateToNextLevelCost.Crystal > Model.PlanetResources.ResourceAmountSet().Crystal)
            {
                <span class="disabled">Upgrade</span>
            }
            else
            {
                @Html.ActionLink("Upgrade", "UpgradeMetalMine", "Resource")
            }
        </td>
    </tr>
    <tr>
        <td class="title">Crystal Mine Level: @Model.PlanetResources.ResourceLevelSet().CrystalMine</td>
        <td>upgrade to level @(Model.PlanetResources.ResourceLevelSet().CrystalMine + 1) costs: 
            <span class="@(Model.PlanetResources.ResourceSet().Crystal.UpdateToNextLevelCost.Metal > Model.PlanetResources.ResourceAmountSet().Metal ? "alert" : "ok")">@Model.PlanetResources.ResourceSet().Crystal.UpdateToNextLevelCost.Metal.FormatResourcesAmount()</span> metal 
            and <span class="@(Model.PlanetResources.ResourceSet().Crystal.UpdateToNextLevelCost.Crystal > Model.PlanetResources.ResourceAmountSet().Crystal ? "alert" : "ok")">@Model.PlanetResources.ResourceSet().Crystal.UpdateToNextLevelCost.Crystal.FormatResourcesAmount()</span> crystal
        </td>
        <td>
             <span class="bold nowrap">@Model.PlanetResources.ResourceSet().Crystal.CalculateUpgradeTime(roboticsLevel,naniteLevel,GameEntity.MetalMine).FormatUpgradeTime()</span> 
                    <br />

           
            @if (Model.PlanetResources.ResourceSet().Crystal.UpdateToNextLevelCost.Metal > Model.PlanetResources.ResourceAmountSet().Metal || Model.PlanetResources.ResourceSet().Crystal.UpdateToNextLevelCost.Crystal > Model.PlanetResources.ResourceAmountSet().Crystal)
            {
                <span class="disabled">Upgrade</span>
            }
            else
            {
                
                @Html.ActionLink("Upgrade", "UpgradeCrystalMine", "Resource")
            }
        </td>
    </tr>
    <tr>
        <td class="title">Deiterium Generator Level: @Model.PlanetResources.ResourceLevelSet().DeiteriumGenerator</td>
        <td>upgrade to level @(Model.PlanetResources.ResourceLevelSet().DeiteriumGenerator + 1) costs:
            <span class="@(Model.PlanetResources.ResourceSet().Deiterium.UpdateToNextLevelCost.Metal > Model.PlanetResources.ResourceAmountSet().Metal ? "alert" : "ok")">@Model.PlanetResources.ResourceSet().Deiterium.UpdateToNextLevelCost.Metal.FormatResourcesAmount()</span> metal 
            and<span class="@(Model.PlanetResources.ResourceSet().Deiterium.UpdateToNextLevelCost.Crystal > Model.PlanetResources.ResourceAmountSet().Crystal ? "alert" : "ok")"> @Model.PlanetResources.ResourceSet().Deiterium.UpdateToNextLevelCost.Crystal.FormatResourcesAmount()</span> crystal
        </td>
        <td>
            
             <span class="bold nowrap">@Model.PlanetResources.ResourceSet().Deiterium.CalculateUpgradeTime(roboticsLevel,naniteLevel,GameEntity.MetalMine).FormatUpgradeTime()</span> 
                    <br />

            @if (Model.PlanetResources.ResourceSet().Deiterium.UpdateToNextLevelCost.Metal > Model.PlanetResources.ResourceAmountSet().Metal || Model.PlanetResources.ResourceSet().Deiterium.UpdateToNextLevelCost.Crystal > Model.PlanetResources.ResourceAmountSet().Crystal)
            {
                <span class="disabled">Upgrade</span>
            }
            else
            {
                @Html.ActionLink("Upgrade", "UpgradeDeiteriumGenerator", "Resource")
            }
        </td>
    </tr>
</table>

