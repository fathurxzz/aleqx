@using System.Web.Optimization
@using SpaceGame.Api
@using SpaceGame.Api.Extensions
@using SpaceGame.Api.Model.Entities
@using SpaceGame.DataAccess
@using SpaceGame.UI.Helpers
@model SpaceGame.UI.Models.FacilityViewModel

@{
    ViewBag.Title = "Facilities";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Title
{
    <div class="mainTitle">
        Facilities
    </div>
}

@section Header
{
    @Html.Partial("_Header", Model)
}

@section Planets
{

}

@section Menu
{
    @Html.Partial("Menu")
}


@section Footer
{
    <div class="footer">
        footer
    </div>
}

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    @Html.Partial("ErrorMessage", Model.ErrorMessage)
}

<table class="facilities">

    @{
        short roboticsLevel = Model.PlanetFacilities.Single(f => f.FacilityId == (int)FacilityItem.RoboticsFactory).Level;
        short naniteLevel = Model.PlanetFacilities.Single(f => f.FacilityId == (int)FacilityItem.NaniteFactory).Level;

        foreach (var item in Model.PlanetFacilities)
        {
        <tr>
            <td class="title">@item.Facility.Name</td>
            <td><span class="currentLevel">@item.Level</span></td>
            <td>upgrage to level @(item.Level + 1) costs: 
                <span class="@(item.UpgradeFacilityCostMetal() > Model.PlanetResources.ResourceAmountSet().Metal ? "alert" : "ok")">@item.UpgradeFacilityCostMetal().FormatResourcesAmount()</span> metal 
                <span class="@(item.UpgradeFacilityCostCrystal() > Model.PlanetResources.ResourceAmountSet().Crystal ? "alert" : "ok")">@item.UpgradeFacilityCostCrystal().FormatResourcesAmount() </span>crystal 
                <span class="@(item.UpgradeFacilityCostDeiterium() > Model.PlanetResources.ResourceAmountSet().Deiterium ? "alert" : "ok")">@item.UpgradeFacilityCostDeiterium().FormatResourcesAmount() </span>deiterium. 
                     
            </td>
            <td>
                @if (item.IsUpdating)
                {
                    <input type="hidden" id="remainingTimeSeconds" value="@((long)(item.UpdateFinish - DateTime.Now).TotalMilliseconds)"/>
                    <span id="remainingTime"></span>
                    
                }
                else
                {
                    <span class="bold nowrap">@item.CalculateUpgradeTime(roboticsLevel, naniteLevel).FormatUpgradeTime()</span> 
                    <br />

                    if (Model.PlanetFacilities.Any(pf => pf.IsUpdating))
                    {
                        <span class="disabled">Upgrade</span>
                    }
                    else
                    {
                        @Html.ActionLink("Upgrade", "Upgrade", "Facility", new { id = item.FacilityId }, null)
                    }
                }
            </td>
            <td></td>
        </tr>
        }
    }

</table>

@section Scripts
{
    @Scripts.Render("~/Scripts/facilities.js")
}
